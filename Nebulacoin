import tkinter as tk
from tkinter import messagebox

# Initialisation des variables
email = ""
motdepasse = ""
solde = 1000  # Solde initial du compte bancaire
portemonnaie = 500  # Solde initial du portefeuille

# Inscription
email = input("Veuillez rentrer une email : ")
motdepasse = input("Entrez un mot de passe : ")

# Connexion
connexionmail = input("Entrez votre mail pour vous connecter : ")
if connexionmail != email:
    print("Email incorrect, accès refusé.")
    exit()

connexionmdp = input("Entrez votre mot de passe : ")
if connexionmdp != motdepasse:
    print("Mot de passe incorrect, accès refusé.")
    exit()

print("Connexion réussie ! Bienvenue dans votre compte.")

# Fonctions pour les transactions
def ajouter_au_portefeuille():
    """Transfère un montant du compte bancaire au portefeuille."""
    global solde, portemonnaie
    montant = int(entry_montant.get())  # Récupère le montant saisi
    if montant <= solde:
        portemonnaie += montant
        solde -= montant
        label_resultat.config(text=f"{montant}€ transférés au portefeuille.")
    else:
        label_resultat.config(text="Fonds insuffisants dans le compte bancaire.")
    afficher_soldes()

def ajouter_au_compte():
    """Transfère un montant du portefeuille au compte bancaire."""
    global solde, portemonnaie
    montant = int(entry_montant.get())  # Récupère le montant saisi
    if montant <= portemonnaie:
        portemonnaie -= montant
        solde += montant
        label_resultat.config(text=f"{montant}€ transférés au compte bancaire.")
    else:
        label_resultat.config(text="Fonds insuffisants dans le portefeuille.")
    afficher_soldes()

def afficher_soldes():
    """Met à jour l'affichage des soldes."""
    label_soldes.config(text=f"Solde du compte bancaire : {solde}€\nPortefeuille : {portemonnaie}€")

# Création de la fenêtre Tkinter
fenetre = tk.Tk()
fenetre.title("Gestion de compte")
fenetre.geometry("400x300")

# Ajout des éléments Tkinter
label_instruction = tk.Label(fenetre, text="Que voulez-vous faire ?")
label_instruction.pack(pady=10)

# Entrée pour le montant
label_montant = tk.Label(fenetre, text="Entrez le montant à transférer :")
label_montant.pack(pady=5)
entry_montant = tk.Entry(fenetre)
entry_montant.pack(pady=5)

# Boutons pour les actions
bouton1 = tk.Button(fenetre, text="Ajouter au portefeuille", command=ajouter_au_portefeuille)
bouton1.pack(pady=5)

bouton2 = tk.Button(fenetre, text="Ajouter au compte bancaire", command=ajouter_au_compte)
bouton2.pack(pady=5)

# Affichage des soldes
label_soldes = tk.Label(fenetre, text="")
label_soldes.pack(pady=10)
afficher_soldes()  # Affiche les soldes initiaux

# Résultat des actions
label_resultat = tk.Label(fenetre, text="", fg="blue")
label_resultat.pack(pady=10)

# Lancer la boucle principale
fenetre.mainloop()

import time
import tkinter as tk
from tkinter import ttk
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import random


Nebulacoin = 0 #monnaie virtuelle possede 
portemonnaie = 0


#introduction
print("Salut,bienvenue dans le portail de la monnaie virtuelle de Nebulacoin")
print("pour commencer connecte toi avec ton e-mail et ton mot de passe ")

# Connexion
connexionmail = input("Entrez votre mail pour vous connecter : ")
if connexionmail != email:
    print("Email incorrect, accès refusé.")
    exit()

connexionmdp = input("Entrez votre mot de passe : ")
if connexionmdp != motdepasse:
    print("Mot de passe incorrect, accès refusé.")
    exit()

print("Connexion réussie ! L'introduction au Nebula coin va commencer.")
print("Pour commencer le Nebulacoin est une monnaie virtuelle totalement fictive vous ne pourrez donc pas gagner de l'argent réel avec")
time.sleep(3) 
print("Le Nebulacoin fonctionne comme une vrai monnaie virtuelle un marché est donc disponible ")
time.sleep(3) 
print("Le Nebulacoin est l'une des premières manières implantées de gagner de l'argent sur votre compte en banque virtuel. (fictif)")
time.sleep(3) 
print("Suivez le marché du Nebulacoin en achetant quand la valeur est basse et en vendant quand la valeur est haute. ")
time.sleep(1) 
print("ouverture de la fenetre d'achat...")


# Fonction pour mettre à jour les données du graphique automatiquement
def update_graph_auto():
    global prices, time_steps,solde , nebulacoin_owned
    # Simulation d'une nouvelle variation du prix
    new_price = prices[-1] + random.uniform(-5, 5)  # Variation aléatoire
    prices.append(max(new_price, 0))  # Évite les prix négatifs
    time_steps.append(time_steps[-1] + 1)

    # Mise à jour du graphique
    ax.clear()
    ax.plot(time_steps, prices, label="Prix de Nebulacoin", color="blue")
    ax.set_title("Évolution du prix de Nebulacoin")
    ax.set_xlabel("Temps")
    ax.set_ylabel("Prix (en $)")
    ax.legend()
    canvas.draw()

    # Mise à jour automatique toutes les secondes
    root.after(1000, update_graph_auto)

# Fonction pour acheter des Nebulacoins
def buy_nebulacoin():
    global solde, nebulacoin_owned, prices
    current_price = prices[-1]
    if solde >= current_price:
        nebulacoin_owned += 1
        solde -= current_price
        status_label.config(text=f"Vous avez acheté 1 Nebulacoin ! Solde : {solde:.2f} $")

    else:
        status_label.config(text="Fonds insuffisants pour acheter un Nebulacoin.")

# Fonction pour vendre des Nebulacoins
def sell_nebulacoin():
    global solde, nebulacoin_owned, prices
    current_price = prices[-1]
    if nebulacoin_owned > 0:
        nebulacoin_owned -= 1
        solde += current_price
        status_label.config(text=f"Vous avez vendu 1 Nebulacoin ! Solde : {solde:.2f} $")
    else:
        status_label.config(text="Vous ne possédez pas de Nebulacoins à vendre.")

# Configuration initiale des données
prices = [100]  # Prix initial de Nebulacoin
time_steps = [0]  # Temps initial
nebulacoin_owned = 0  # Nombre de Nebulacoins possédés

# Création de la fenêtre principale
root = tk.Tk()
root.title("Suivi de Nebulacoin")

# Ajout d'un graphique avec Matplotlib
fig = Figure(figsize=(6, 4), dpi=100)
ax = fig.add_subplot(111)
ax.plot(time_steps, prices, label="Prix de Nebulacoin", color="blue")
ax.set_title("Évolution du prix de Nebulacoin")
ax.set_xlabel("Temps")
ax.set_ylabel("Prix (en $)")
ax.legend()

canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

# Section des boutons et du statut
button_frame = ttk.Frame(root)
button_frame.pack(side=tk.BOTTOM, fill=tk.X)

buy_button = ttk.Button(button_frame, text="Acheter", command=buy_nebulacoin)
buy_button.pack(side=tk.LEFT, padx=10, pady=10)

sell_button = ttk.Button(button_frame, text="Vendre", command=sell_nebulacoin)
sell_button.pack(side=tk.RIGHT, padx=10, pady=10)

# Étiquette pour afficher les informations de statut
status_label = ttk.Label(root, text=f"Solde : {solde:.2f} $ | Nebulacoins possédés : {nebulacoin_owned}")
status_label.pack(side=tk.BOTTOM, pady=5)

# Démarrage de la mise à jour automatique
update_graph_auto()

# Lancement de la boucle principale Tkinter
root.mainloop()

#travaille
print("Salut, maintenant que tu a biens alimenter ton compte en banque allons despenser !")
time.sleep(3)
print("utilison Amazip !")

messagebox.showinfo("Salut ! desolée du soucis mais Amazip est en developpement desolés !")

messagebox.showinfo("Ah...")
